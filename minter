
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.8.0;
import "./Grind.sol";


contract minter  {
    
    
    address payable public owner;
    address payable public intitalOfferingContract;
    address payable public BurnToStakeContract;
    address payable public GameFundStake;
    bool private setgrindIsSet = false;
    bool private setGameFundContractIsSet = false;
    bool private setBurnToStakeContractIsSet = false;
    bool private setICOIsSet = false;
    address public grindContract;
    GRIND g;
    
    
    modifier onlyOwner{
        require(
            msg.sender == owner,
            "Only the minter contract can call this function."
        );
        _;
    }
    
    modifier canMint {
        require (msg.sender == intitalOfferingContract || msg.sender == BurnToStakeContract || msg.sender == GameFundStake, "not allowed to mint");
        _;
    }
    
    
    constructor() public {
     
        owner = msg.sender;
     
    }

function setGrind (address payable grindcontractaddress) onlyOwner public {
    require(!setgrindIsSet, 'grind is already set, you trying to scam the people?');
    grindContract = grindcontractaddress;
    g = GRIND (grindcontractaddress);
    setgrindIsSet = true;
} 
function setICO (address payable icocontract) onlyOwner public {
     require(!setICOIsSet, 'grind is already set, you trying to scam the people?');
        intitalOfferingContract = icocontract;
     setICOIsSet = true;
} 
function setGameFundContract (address payable gamefund) onlyOwner public {
         require(!setGameFundContractIsSet, 'grind is already set, you trying to scam the people?');
    GameFundStake = gamefund;
    setGameFundContractIsSet = true;
} 
function setBurnToStakeContract (address payable burn) onlyOwner public {
         require(!setBurnToStakeContractIsSet, 'grind is already set, you trying to scam the people?');
    BurnToStakeContract = burn;
    setBurnToStakeContractIsSet = true;
} 


function mint (address payable recipient, uint amount) canMint public {

   g.mint(recipient, amount);
   
}

}

